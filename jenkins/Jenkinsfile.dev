pipeline {
  
  agent none

  options {
    disableConcurrentBuilds()

    buildDiscarder(
      logRotator(
        numToKeepStr: '10'
      )
    )

    office365ConnectorWebhooks([[
      url: "${env.TEAMS_WEBHOOK_URL}",
      notifyUnstable: true,
      notifyFailure: true,
      notifyBackToNormal: true,
      startNotification: false,
      notifySuccess: false,
      notifyAborted: false,
      notifyNotBuilt: false,
      notifyRepeatedFailure: false
    ]])
  }
  parameters {
    string(
      name: 'BROWSER_VUS',
      description: 'The number of vus to use',
      defaultValue: '45',
      trim: true
    )
  }
  environment {
    GRAPHQL_TOKEN = credentials('dev-load-testing-proposal-api-key')
    BROWSER_BASE_URL = 'https://devproposal.facilities.rl.ac.uk'
    GRAPHQL_URL = 'https://devproposal.facilities.rl.ac.uk/graphql'
    HOME = '.'
    ENVIRONMENT = 'develop'
    SC1_BROWSER_VUS = "${params.BROWSER_VUS}"
  }

  stages {

    stage('Build load tests') { 

      docker {
        label 'linux && docker'
        image 'node:21.7-alpine'
        alwaysPull true
      }

      steps {
        copyArtifacts(
          projectName: 'Dev_Build_BisAppSettings',
          filter: 'BISAppSettings/proposal-load-tester/k6/dev/.env',
          selector: lastSuccessful(),
          fingerprintArtifacts: true,
          flatten: true
        )
          
      sh """
          # clean up past data
          rm -rf ./node_modules
          rm -rf ./apps/k6-tests/node_modules
          rm -rf ./apps/user-setup/node_modules
          rm -rf ./apps/user-setup/.env

          # move env to the correct location
          mv .env apps/user-setup/

          # install and build
          npm install
          npm run build
          npm run dev:build:k6-test 
      """  
      }
    }

    stage('Run load tests on dev') {
      
      agent {
        dockerfile {
          filename 'Dockerfile.run'
          label 'linux && docker'
        }
      }
      steps {
        // start user setup server
        sh ('ls')
        sh ('npm run dev:start:user-setup')
      }
    }
  }

  // post {
  //   regression {
  //       emailext(
  //         subject: '$DEFAULT_SUBJECT',
  //         body: '$DEFAULT_CONTENT',
  //         to: '$DEFAULT_RECIPIENTS',
  //         recipientProviders: [developers()]
  //       )
  //     }

  //   fixed {
  //     emailext(
  //     subject: '$DEFAULT_SUBJECT',
  //     body: '$DEFAULT_CONTENT',
  //     to: '$DEFAULT_RECIPIENTS',
  //     recipientProviders: [developers()]
  //   )
  //   }
  // }
}
